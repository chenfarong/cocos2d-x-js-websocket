{"version":3,"sources":["GMain.js"],"names":["getdate","timestamp","now","Date","y","getFullYear","m","getMonth","d","getDate","toTimeString","substr","cc","Class","extends","Component","properties","label","default","type","Label","btnConn","Button","tiHost","EditBox","text","myListener","EventListener","myListener1","myConnectTimeout","labNetState","labServerTime","lvServers","ScrollView","netEvent","msg","target","cmd","XOpcodes","XC_NET_DISCONNECTED","director","getScheduler","schedule","connectServer","console","log","labelNode","node","getChildByName","getComponent","string","XC_NET_CONNECTED","fontSize","time","toString","timestamp4","ts","toLocaleDateString","replace","XServerConnected","onDestroy","XNet","ListenerRemove","SC_SYS_INFO","onLoad","sys","localStorage","getItem","view","setDesignResolutionSize","ResolutionPolicy","SHOW_ALL","EarAdd","XGame","callback","ListenerAdd","XC_NET_CONNECT_TIMEOUT","XC_NET_ERROR","update","dt","connect","connectCheck","connectTimeout","readyState","WebSocket","OPEN","serverList","Array","JSON","parse","indexOf","push","setItem","stringify","userData","host","btnServerList","event","sprite","Sprite","getScene","addChild"],"mappings":"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","file":"GMain.js","sourceRoot":"../../../../assets/Script","sourcesContent":["import { XNet } from \"./Network\";\nimport { XGame } from \"./GGame\";\nimport { XOpcodes } from \"./Opcodes\";\n\nfunction getdate(timestamp) {\n  var now = new Date(timestamp),\n    y = now.getFullYear(),\n    m = now.getMonth() + 1,\n    d = now.getDate();\n  return (\n    y +\n    \"-\" +\n    (m < 10 ? \"0\" + m : m) +\n    \"-\" +\n    (d < 10 ? \"0\" + d : d) +\n    \" \" +\n    now.toTimeString().substr(0, 8)\n  );\n}\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    label: {\n      default: null,\n      type: cc.Label\n    },\n    btnConn: cc.Button,\n    tiHost: cc.EditBox,\n    // defaults, set visually when attaching this script to the Canvas\n    text: \"Hello, World!\",\n    myListener: cc.EventListener,\n    myListener1: null,\n    myConnectTimeout: null,\n\n    labNetState: cc.Label,\n    labServerTime: cc.Label,\n    lvServers: cc.ScrollView\n  },\n\n  netEvent: function(msg, target) {\n    //这里处理游戏来的所有事件\n    //if(event==xx_opcodes.SC_SYS_INFO){\n\n    //this.labServerTime.string='time:'+msg.time;\n\n    //   return;\n    //}\n\n    if (msg.cmd == XOpcodes.XC_NET_DISCONNECTED) {\n      //fixme 整理要看客户端是否要重连游戏服务器\n      cc.director\n        .getScheduler()\n        .schedule(target.connectServer, target, 3, 1, 3, false);\n      return;\n    }\n\n    if (msg.cmd == \"XC_NET_ERROR\") {\n      console.log(\"xxxx--net--xxxxx\");\n      cc.director\n        .getScheduler()\n        .schedule(target.connectServer, target, 3, 1, 3, false);\n      return;\n    }\n\n    let labelNode = target.node.getChildByName(\"labNetState\");\n    if (labelNode) {\n      let label = labelNode.getComponent(cc.Label);\n      if (label) {\n        if (msg.cmd == \"XC_NET_CONNECT_TIMEOUT\") {\n          label.string = \"网络连接超时\";\n          return;\n        }\n\n        if (msg.cmd == XOpcodes.XC_NET_CONNECTED) {\n          label.string = \"连接成功\";\n          return;\n        }\n\n        label.fontSize = 24;\n        //labelNode.color = btnTitleColor;\n        //let _now=getdate(msg.time);\n        label.string = \"time:\" + msg.time.toString();\n        let timestamp4 = new Date(msg.time * 1000);\n        let ts =\n          timestamp4.toLocaleDateString().replace(/\\//g, \"-\") +\n          \" \" +\n          timestamp4.toTimeString().substr(0, 8);\n        label.string = \"\" + ts;\n      }\n    }\n  },\n\n  XServerConnected: function(msg, target) {\n    console.log(\"xxxxxxxxx\");\n  },\n\n  onDestroy() {\n    XNet.ListenerRemove(XOpcodes.SC_SYS_INFO, this.myListener1);\n  },\n\n  // use this for initialization\n  onLoad: function() {\n    //this.tiHost.string = cc.sys.localStorage.getItem('lastServer');\n    if (cc.sys.localStorage.getItem(\"lastServer\")) {\n      //console.log(cc.sys.localStorage.getItem('serverList'));\n      //serverList=JSON.parse(cc.sys.localStorage.getItem('serverList'));\n      this.tiHost.string = cc.sys.localStorage.getItem(\"lastServer\");\n    }\n\n    cc.view.setDesignResolutionSize(640, 960, cc.ResolutionPolicy.SHOW_ALL);\n\n    //cc.debug.isDisplayStats();\n    this.label.string = \"hello xxx\";\n\n    //XNet.ListenerAdd(xx_opcodes.XC_NET_CONNECTED,XServerConnected);\n    XNet.EarAdd(XGame);\n\n    //        this.label.string = this.text;\n    /*\n         this.myListener = cc.EventListener.create({\n            event    :cc.EventListener.CUSTOM,\n            target   :this,\n            eventName:\"XNetOpened\",//最好参考cocos将此参数定义为一个常量\n            callback : function (event) {\n    \n                //获取Bear实例对象\n                //var target = event.getUserData();\n    \n                //方法调用\n                //target.bearJump();\n                //target.bearEat();\n                //target._labNetState.string=\"connected\";\n                console.log(\"xxxxxxxxx\");\n            }\n        });\n        cc.eventManager.addListener(this.myListener,1);\n\n\n\n        var labNode=this.node.getChildByName('labNetState');\n        labNode.color = new cc.color(255,255,0,255);\n        var labNode2=labNode.getComponent(cc.Label);\n        if(labNode2){\n            labNode2.string=XSession.dsid;\n        }\n*/\n    /*\n        XNet.ListenerAdd(\"XNetOpened\",function(msg){\n            console.log(\"xxxxxxxxx\");\n            //this.labelNetState.string=\"xxx\";\n        });\n        */\n\n    /*        \n        this.myListener1={callback:function(msg,target){\n            //console.log(\"xxxxxxxxx\");\n            //this.labNetState.string=\"xxx\";\n            console.log(JSON.stringify(msg));\n            var labelNode = target.node.getChildByName('labNetState');\n            if(labelNode){\n                var label = labelNode.getComponent(cc.Label);\n                    if(label) {\n                        label.fontSize = 24;\n                        //labelNode.color = btnTitleColor;\n                       //let _now=getdate(msg.time);\n                        label.string =\"time:\"+msg.time.toString();\n                        let timestamp4=new Date(msg.time*1000);\n                        let ts=timestamp4.toLocaleDateString().replace(/\\//g, \"-\") + \" \" + timestamp4.toTimeString().substr(0, 8)\n                        label.string =\"\"+ts;\n                    }\n            }\n            \n        },target:this};\n        XNet.ListenerAdd(xx_opcodes.SC_SYS_INFO,this.myListener1);\n\n*/\n    this.myListener1 = { callback: this.netEvent, target: this };\n\n    XNet.ListenerAdd(XOpcodes.XC_NET_CONNECTED, this.myListener1);\n    XNet.ListenerAdd(XOpcodes.SC_SYS_INFO, this.myListener1);\n    XNet.ListenerAdd(XOpcodes.XC_NET_CONNECT_TIMEOUT, this.myListener1);\n    XNet.ListenerAdd(XOpcodes.XC_NET_ERROR, this.myListener1);\n    XNet.ListenerAdd(XOpcodes.XC_NET_DISCONNECTED, this.myListener1);\n\n    /*\n        this.myListener1={callback:function(msg,target){\n            console.log(\"xxxxxxxxx\");\n            let labelNode = target.node.getChildByName('LabelServerTime');\n            let label = labelNode.getComponent(cc.Label);\n            label.string= \"time:\"+msg.time;\n        },target:this};\n\n        XNet.ListenerAdd(xx_opcodes.SC_SYS_INFO,this.myListener1);\n*/\n\n    //XNet.ListenerAdd(\"XNetOpened\",{callback:this.myListener1,target:this});\n    // this.labNetState.string=XGame.dsid;\n  },\n\n  // called every frame\n  update: function(dt) {},\n\n  connectServer() {\n    XNet.connect();\n    cc.director\n      .getScheduler()\n      .schedule(this.connectCheck, this, 6, 1, 6, false);\n  },\n\n  connectCheck: function() {\n    XNet.connectCheck();\n  },\n\n  connectTimeout() {\n    if (XNet.readyState() == WebSocket.OPEN) {\n      //网络健康检查\n      cc.director\n        .getScheduler()\n        .schedule(this.connectCheck, this, 15, 0, 0, false);\n    } else {\n      //重新连接服务器\n      XNet.connect();\n    }\n  },\n\n  connect: function() {\n    let serverList = new Array();\n    if (cc.sys.localStorage.getItem(\"serverList\")) {\n      console.log(cc.sys.localStorage.getItem(\"serverList\"));\n      serverList = JSON.parse(cc.sys.localStorage.getItem(\"serverList\"));\n    }\n\n    //这里要找如果不存在加入\n    if (serverList.indexOf(this.tiHost.string) == -1) {\n      serverList.push(this.tiHost.string);\n    }\n\n    cc.sys.localStorage.setItem(\"serverList\", JSON.stringify(serverList));\n\n    cc.sys.localStorage.setItem(\"lastServer\", this.tiHost.string);\n\n    console.log(\"click connect\" + this.tiHost.string);\n\n    var userData = JSON.parse(cc.sys.localStorage.getItem(\"serverList\"));\n\n    //    let s= cc.sys.localStorage.getItem('serverList');\n    console.log(\"click connect\" + JSON.stringify(userData));\n\n    //return;\n\n    XNet.host(this.tiHost.string);\n    this.connectServer();\n    //XNet.connect();\n    //cc.director.getScheduler().schedule(this.connectCheck,this,6, 1, 6,false);\n  },\n  btnServerList: function(event) {\n    console.log(\"btnServerList\");\n    var sprite = new cc.Sprite(\"Texture/HelloWorld.png\");\n    cc.director.getScene().addChild(sprite);\n    //this.lvServers.(sprite, 2);\n    //this.node.addChild(sprite);\n  }\n});\n"]}