{"version":3,"sources":["GMain.js"],"names":["getdate","timestamp","now","Date","y","getFullYear","m","getMonth","d","getDate","toTimeString","substr","cc","Class","extends","Component","properties","label","default","type","Label","btnConn","Button","tiHost","EditBox","text","myListener","EventListener","myListener1","myConnectTimeout","labNetState","labServerTime","netEvent","msg","target","cmd","xx_opcodes","XC_NET_DISCONNECTED","director","getScheduler","schedule","connectServer","console","log","labelNode","node","getChildByName","getComponent","string","XC_NET_CONNECTED","fontSize","time","toString","timestamp4","ts","toLocaleDateString","replace","XServerConnected","onDestroy","XNet","ListenerRemove","SC_SYS_INFO","onLoad","sys","localStorage","getItem","view","setDesignResolutionSize","ResolutionPolicy","SHOW_ALL","EarAdd","XGame","callback","ListenerAdd","XC_NET_CONNECT_TIMEOUT","XC_NET_ERROR","update","dt","connect","connectCheck","connectTimeout","readyState","WebSocket","OPEN","serverList","Array","JSON","parse","indexOf","push","setItem","stringify","userData","host"],"mappings":"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","file":"GMain.js","sourceRoot":"../../../../assets/Script","sourcesContent":["\nimport {XNet} from './Network';\nimport {XGame} from './GGame';\nimport {xx_opcodes} from './Opcodes';\n\nfunction getdate(timestamp) {\n    var now = new Date(timestamp),\n        y = now.getFullYear(),\n        m = now.getMonth() + 1,\n        d = now.getDate();\n    return y + \"-\" + (m < 10 ? \"0\" + m : m) + \"-\" + (d < 10 ? \"0\" + d : d) + \" \" + now.toTimeString().substr(0, 8);\n}\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        label: {\n            default: null,\n            type: cc.Label\n        },\n        btnConn : cc.Button,\n        tiHost: cc.EditBox,\n        // defaults, set visually when attaching this script to the Canvas\n        text: 'Hello, World!',\n        myListener : cc.EventListener,\n        myListener1: null,\n        myConnectTimeout:null,\n\n        labNetState:cc.Label,\n        labServerTime:cc.Label\n    },\n\n    netEvent:function(msg,target) {\n        //这里处理游戏来的所有事件\n        //if(event==xx_opcodes.SC_SYS_INFO){\n\n            //this.labServerTime.string='time:'+msg.time;\n            \n         //   return;\n        //}\n\n        if(msg.cmd==xx_opcodes.XC_NET_DISCONNECTED){\n            //fixme 整理要看客户端是否要重连游戏服务器\n            cc.director.getScheduler().schedule(target.connectServer,target,3, 1, 3,false);\n            return;\n        }\n\n        if(msg.cmd==\"XC_NET_ERROR\")\n        {\n            console.log(\"xxxx--net--xxxxx\");\n            cc.director.getScheduler().schedule(target.connectServer,target,3, 1, 3,false);\n            return;\n        }\n\n        let labelNode = target.node.getChildByName('labNetState');\n        if(labelNode){\n            let label = labelNode.getComponent(cc.Label);\n                if(label) {\n\n                    if(msg.cmd==\"XC_NET_CONNECT_TIMEOUT\")\n                    {\n                        label.string=\"网络连接超时\";\n                        return;\n                    }\n\n                    if(msg.cmd==xx_opcodes.XC_NET_CONNECTED){\n                        label.string=\"连接成功\";\n                        return;\n                    }\n\n                    label.fontSize = 24;\n                    //labelNode.color = btnTitleColor;\n                   //let _now=getdate(msg.time);\n                    label.string =\"time:\"+msg.time.toString();\n                    let timestamp4=new Date(msg.time*1000);\n                    let ts=timestamp4.toLocaleDateString().replace(/\\//g, \"-\") + \" \" + timestamp4.toTimeString().substr(0, 8)\n                    label.string =\"\"+ts;\n                }\n        }\n    },\n\n    XServerConnected:function(msg,target)\n    {\n        console.log(\"xxxxxxxxx\");\n    },\n\n    onDestroy(){\n        XNet.ListenerRemove(xx_opcodes.SC_SYS_INFO,this.myListener1);\n    },\n\n    // use this for initialization\n    onLoad: function () {\n\n       //this.tiHost.string = cc.sys.localStorage.getItem('lastServer');\n       if(cc.sys.localStorage.getItem('lastServer')){\n        //console.log(cc.sys.localStorage.getItem('serverList'));\n        //serverList=JSON.parse(cc.sys.localStorage.getItem('serverList'));\n        this.tiHost.string = cc.sys.localStorage.getItem('lastServer');\n    }\n\n        cc.view.setDesignResolutionSize(640, 960, cc.ResolutionPolicy.SHOW_ALL);\n\n\n        //XNet.ListenerAdd(xx_opcodes.XC_NET_CONNECTED,XServerConnected);\n       XNet.EarAdd(XGame);\n       \n//        this.label.string = this.text;\n/*\n         this.myListener = cc.EventListener.create({\n            event    :cc.EventListener.CUSTOM,\n            target   :this,\n            eventName:\"XNetOpened\",//最好参考cocos将此参数定义为一个常量\n            callback : function (event) {\n    \n                //获取Bear实例对象\n                //var target = event.getUserData();\n    \n                //方法调用\n                //target.bearJump();\n                //target.bearEat();\n                //target._labNetState.string=\"connected\";\n                console.log(\"xxxxxxxxx\");\n            }\n        });\n        cc.eventManager.addListener(this.myListener,1);\n\n\n\n        var labNode=this.node.getChildByName('labNetState');\n        labNode.color = new cc.color(255,255,0,255);\n        var labNode2=labNode.getComponent(cc.Label);\n        if(labNode2){\n            labNode2.string=XSession.dsid;\n        }\n*/\n        /*\n        XNet.ListenerAdd(\"XNetOpened\",function(msg){\n            console.log(\"xxxxxxxxx\");\n            //this.labelNetState.string=\"xxx\";\n        });\n        */\n\n/*        \n        this.myListener1={callback:function(msg,target){\n            //console.log(\"xxxxxxxxx\");\n            //this.labNetState.string=\"xxx\";\n            console.log(JSON.stringify(msg));\n            var labelNode = target.node.getChildByName('labNetState');\n            if(labelNode){\n                var label = labelNode.getComponent(cc.Label);\n                    if(label) {\n                        label.fontSize = 24;\n                        //labelNode.color = btnTitleColor;\n                       //let _now=getdate(msg.time);\n                        label.string =\"time:\"+msg.time.toString();\n                        let timestamp4=new Date(msg.time*1000);\n                        let ts=timestamp4.toLocaleDateString().replace(/\\//g, \"-\") + \" \" + timestamp4.toTimeString().substr(0, 8)\n                        label.string =\"\"+ts;\n                    }\n            }\n            \n        },target:this};\n        XNet.ListenerAdd(xx_opcodes.SC_SYS_INFO,this.myListener1);\n\n*/\n        this.myListener1={callback:this.netEvent,target:this};\n\n        XNet.ListenerAdd(xx_opcodes.XC_NET_CONNECTED,this.myListener1);\n        XNet.ListenerAdd(xx_opcodes.SC_SYS_INFO,this.myListener1);\n        XNet.ListenerAdd(xx_opcodes.XC_NET_CONNECT_TIMEOUT,this.myListener1);\n        XNet.ListenerAdd(xx_opcodes.XC_NET_ERROR,this.myListener1);\n        XNet.ListenerAdd(xx_opcodes.XC_NET_DISCONNECTED,this.myListener1);\n\n/*\n        this.myListener1={callback:function(msg,target){\n            console.log(\"xxxxxxxxx\");\n            let labelNode = target.node.getChildByName('LabelServerTime');\n            let label = labelNode.getComponent(cc.Label);\n            label.string= \"time:\"+msg.time;\n        },target:this};\n\n        XNet.ListenerAdd(xx_opcodes.SC_SYS_INFO,this.myListener1);\n*/\n\n        //XNet.ListenerAdd(\"XNetOpened\",{callback:this.myListener1,target:this});\n       // this.labNetState.string=XGame.dsid;\n\n    },\n\n    // called every frame\n    update: function (dt) {\n\n    },\n\n    connectServer(){\n        XNet.connect();\n        cc.director.getScheduler().schedule(this.connectCheck,this,6, 1, 6,false);\n    },\n\n    connectCheck:function(){\n        XNet.connectCheck();\n    },\n\n    connectTimeout(){\n        if(XNet.readyState()==WebSocket.OPEN){\n            //网络健康检查\n            cc.director.getScheduler().schedule(this.connectCheck,this,15, 0, 0,false);\n        }else{\n            //重新连接服务器\n            XNet.connect();\n        }\n    },\n\n    connect:function()\n    {\n        let serverList=new Array();\n        if(cc.sys.localStorage.getItem('serverList')){\n            console.log(cc.sys.localStorage.getItem('serverList'));\n            serverList=JSON.parse(cc.sys.localStorage.getItem('serverList'));\n        }\n\n        //这里要找如果不存在加入\n        if(serverList.indexOf(this.tiHost.string)==-1){\n            serverList.push(this.tiHost.string);\n        }\n\n        cc.sys.localStorage.setItem('serverList',JSON.stringify(serverList));\n\n        cc.sys.localStorage.setItem('lastServer',this.tiHost.string);\n\n        console.log(\"click connect\"+this.tiHost.string);\n\n        var userData = JSON.parse(cc.sys.localStorage.getItem('serverList'));\n\n    //    let s= cc.sys.localStorage.getItem('serverList');\n        console.log(\"click connect\"+JSON.stringify(userData));\n\n        //return;\n\n        XNet.host(this.tiHost.string);\n        this.connectServer();\n        //XNet.connect();\n        //cc.director.getScheduler().schedule(this.connectCheck,this,6, 1, 6,false);\n\n    },\n\n});\n"]}